<?php
/*
 * This file generated by TrusCRUD.
 *
 * (c) M. Yusup Hamdani <me@dani.work>
 * website: www.dani.work
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
*/
namespace Api\Controllers;

use App\Models\Purchase;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Request;

class PurchaseController extends APIController
{

    function __construct()
    {
        parent::__construct();
    }

    function index(Request $request, Purchase $model) {
        try {

            if($request->q != null) {
                $data = $model->where('nama_project','like', "%$request->q%")->paginate(10);
            } else {
                $data = $model->paginate(10);
            }

            $this->success['data'] = [
                'results' => $data
            ];

            return resJSON($this->success);
        } catch (\Throwable $th) {
            $this->error['message'] = $th->getMessage();

            return resJSON($this->error);
        }
    }

    function store(Request $request, Purchase $model) {
        try {
            DB::beginTransaction();

			$model->no_purchase_order      = $request->no_purchase_order;
			$model->nama_project      = $request->nama_project;
			$model->customer      = $request->customer;
			$model->nominal_purchase_order      = $request->nominal_purchase_order;
			$model->status_delivery      = $request->status_delivery;


            $model->save();

            DB::commit();
            $this->success['message'] = __('Saved Successful.');
            $this->success['data'] = $model->id;

            return resJSON($this->success);
            
        } catch (\Throwable $th) {
            DB::rollBack();
            $this->error['message'] = $th->getMessage();

            return resJSON($this->error);
        }
    }

    function show(Request $request, $key) {
        try {
            $data = Purchase::where('id', $key)->orWhere('id', $key)->firstOrFail();

            $this->success['data'] = $data;

            return resJSON($this->success);
        } catch (\Throwable $th) {
            $this->error['message'] = $th->getMessage();

            return resJSON($this->error);
        }
    }

    function destroy(Request $request, $key) {
        try {

            $data = Purchase::where('id', $key)->orWhere('id', $key)->delete();

            $this->success['message'] = __('Deleted Successful.');

            return resJSON($this->success);
        } catch (\Throwable $th) {
            $this->error['message'] = $th->getMessage();

            return resJSON($this->error);
        }   
    }
}
